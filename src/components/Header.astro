---
import HeaderLink from './HeaderLink.astro';
import { SITE_TITLE } from '../consts';
---

<header class="sticky top-0 z-[1000] backdrop-blur-2xl border-b border-slate-700/40" style="background: rgba(15, 23, 42, 0.15); backdrop-filter: blur(20px);">
	<nav class="max-w-7xl mx-auto px-6 h-16 flex items-center justify-between">
		<!-- Logo/Brand -->
		<a href="/" class="flex items-center gap-2 hover:opacity-80 transition-opacity duration-200">
			<h1 class="text-xl font-semibold text-gray-200">UmmIt :D</h1>
		</a>
		
		<!-- Navigation Links -->
		<div class="hidden md:flex items-center gap-8">
			<HeaderLink href="/blog">Blog</HeaderLink>
			<HeaderLink href="/about">About</HeaderLink>
		</div>
		
		<!-- Search and Mobile Menu -->
		<div class="flex items-center gap-4">
			<!-- Search Bar -->
			<div class="hidden sm:flex items-center gap-2 px-3 py-2 rounded-lg bg-slate-800/50 border border-slate-700/50 min-w-[200px] relative">
				<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="text-gray-400">
					<circle cx="11" cy="11" r="8"/>
					<path d="m21 21-4.35-4.35"/>
				</svg>
				<input 
					id="search-input"
					type="text" 
					placeholder="Search posts..." 
					class="bg-transparent text-gray-300 placeholder-gray-500 text-sm w-full outline-none"
				/>
				<!-- Search Results Dropdown -->
				<div id="search-results" class="absolute top-full left-0 right-0 mt-2 bg-slate-900 border border-slate-700 rounded-lg shadow-lg hidden max-h-80 overflow-y-auto"></div>
			</div>
			
			<!-- Mobile Menu Button -->
			<button 
				id="mobile-menu-btn" 
				type="button"
				class="md:hidden p-2 rounded-lg hover:bg-slate-800/50 transition-colors duration-200" 
				title="Menu"
				aria-label="Toggle mobile menu"
				aria-expanded="false"
				aria-controls="mobile-menu"
			>
				<svg id="hamburger-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="text-gray-400">
					<line x1="4" x2="20" y1="12" y2="12"/>
					<line x1="4" x2="20" y1="6" y2="6"/>
					<line x1="4" x2="20" y1="18" y2="18"/>
				</svg>
				<svg id="close-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="text-gray-400" style="display: none;">
					<line x1="18" y1="6" x2="6" y2="18" />
					<line x1="6" y1="6" x2="18" y2="18" />
				</svg>
			</button>
		</div>
	</nav>
	
	<!-- Mobile Menu -->
	<div id="mobile-menu" class="md:hidden hidden backdrop-blur-2xl border-t border-slate-700/40" style="background: rgba(15, 23, 42, 0.2); backdrop-filter: blur(20px);" role="menu">
		<div class="px-6 py-4 space-y-2">
			<a href="/" class="block py-2 text-gray-300 hover:text-gray-100 transition-colors duration-200" role="menuitem">Home</a>
			<a href="/blog" class="block py-2 text-gray-300 hover:text-gray-100 transition-colors duration-200" role="menuitem">Blog</a>
			<a href="/about" class="block py-2 text-gray-300 hover:text-gray-100 transition-colors duration-200" role="menuitem">About</a>
		</div>
	</div>
</header>

<script>
  let cleanup: (() => void) | null = null;
  let retryTimeout: number | null = null;
  const MAX_RETRIES = 10;
  let retryCount = 0;

  function safeInitMobileMenu() {
    // Clear any existing timeout to prevent race conditions
    if (retryTimeout !== null) {
      clearTimeout(retryTimeout);
      retryTimeout = null;
    }
    retryCount = 0;
    requestAnimationFrame(initMobileMenu);
  }

  function initMobileMenu() {
    if (cleanup) cleanup();

    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerIcon = document.getElementById('hamburger-icon');
    const closeIcon = document.getElementById('close-icon');

    if (!mobileMenuBtn || !mobileMenu || !hamburgerIcon || !closeIcon) {
      if (retryCount < MAX_RETRIES) {
        // Clear any existing timeout before setting a new one
        if (retryTimeout !== null) {
          clearTimeout(retryTimeout);
        }
        retryTimeout = window.setTimeout(initMobileMenu, 50);
        retryCount++;
      }
      return;
    }

    mobileMenu.classList.add('hidden');
    hamburgerIcon.style.display = 'block';
    closeIcon.style.display = 'none';

    function toggleMenu(e: any) {
      e.preventDefault();
      e.stopPropagation();
      if (!mobileMenu || !hamburgerIcon || !closeIcon || !mobileMenuBtn) return;
      if (mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.remove('hidden');
        hamburgerIcon.style.display = 'none';
        closeIcon.style.display = 'block';
      } else {
        mobileMenu.classList.add('hidden');
        hamburgerIcon.style.display = 'block';
        closeIcon.style.display = 'none';
      }
    }

    function closeMenu() {
      if (!mobileMenu || !hamburgerIcon || !closeIcon) return;
      mobileMenu.classList.add('hidden');
      hamburgerIcon.style.display = 'block';
      closeIcon.style.display = 'none';
    }

    function outsideClick(e: any) {
      if (!mobileMenuBtn || !mobileMenu) return;
      if (!mobileMenuBtn.contains(e.target) && !mobileMenu.contains(e.target)) {
        closeMenu();
      }
    }

    mobileMenuBtn.addEventListener('click', toggleMenu);
    const menuLinks = mobileMenu.querySelectorAll('a');
    menuLinks.forEach(link => link.addEventListener('click', closeMenu));
    document.addEventListener('click', outsideClick);

    cleanup = () => {
      mobileMenuBtn.removeEventListener('click', toggleMenu);
      menuLinks.forEach(link => link.removeEventListener('click', closeMenu));
      document.removeEventListener('click', outsideClick);
      if (retryTimeout !== null) {
        clearTimeout(retryTimeout);
        retryTimeout = null;
      }
      cleanup = null;
    };
  }

  document.addEventListener('DOMContentLoaded', safeInitMobileMenu);
  document.addEventListener('astro:page-load', safeInitMobileMenu);

  // Search functionality
  async function initSearch() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results') as HTMLDivElement;
    
    if (!searchInput || !searchResults) return;
    
    let searchTimeout: number | null = null;
    
    async function performSearch(query: string) {
      if (!query.trim()) {
        searchResults.classList.add('hidden');
        searchResults.innerHTML = '';
        return;
      }
      
      try {
        // For now, we'll redirect to blog page with search query
        // In a real implementation, you'd fetch and filter posts here
        searchResults.innerHTML = `
          <a href="/blog?search=${encodeURIComponent(query)}" class="block px-4 py-3 hover:bg-slate-800/50 transition-colors">
            <div class="text-sm text-gray-300">Search for "${query}" in blog posts</div>
            <div class="text-xs text-gray-500 mt-1">Press Enter to search</div>
          </a>
        `;
        searchResults.classList.remove('hidden');
      } catch (error) {
        console.error('Search error:', error);
      }
    }
    
    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value;
      
      if (searchTimeout !== null) {
        clearTimeout(searchTimeout);
      }
      
      searchTimeout = window.setTimeout(() => performSearch(query), 300);
    });
    
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        const query = (e.target as HTMLInputElement).value;
        if (query.trim()) {
          window.location.href = `/blog?search=${encodeURIComponent(query)}`;
        }
      }
    });
    
    // Close search results when clicking outside
    document.addEventListener('click', (e) => {
      if (!searchInput.contains(e.target as Node) && !searchResults.contains(e.target as Node)) {
        searchResults.classList.add('hidden');
      }
    });
  }
  
  document.addEventListener('DOMContentLoaded', initSearch);
  document.addEventListener('astro:page-load', initSearch);
</script>

<style>
	input::-webkit-scrollbar {
		display: none;
	}
	
	@media (max-width: 768px) {
		nav {
			padding: 0 1rem;
		}
	}
</style>